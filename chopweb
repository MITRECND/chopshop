#!/usr/bin/env python

# Copyright (c) 2013 The MITRE Corporation. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

#Chopshop

"""
TODO 
    Need to add multi-threading support -- requires locking of smallest_discard object

"""


VERSION = "3.0-BETA"

import sys
import signal
import os
import nids
import fileinput
from optparse import OptionParser
from threading import Thread
from threading import Lock

#Python Version Check
version = sys.version_info
version = float(str(version[0]) + "." + str(version[1]))

if version < 2.6:
    print "Python Minimum Version 2.6 required"
    sys.exit(-1)

from multiprocessing import Process, Queue as mQueue
import Queue
import time

try:
    from mod_pywebsocket import standalone
except:
    sys.exit(-1)

#Chopshop Working Directory -- defaults to where script exists
CHOPSHOP_WD = os.path.realpath(os.path.dirname(sys.argv[0]))

sys.path.append(CHOPSHOP_WD + '/shop')

##### DEBUG CODE #####
### This is meant to be used for the sole purpose of chopshop core development
### DO NOT ENABLE THIS UNLESS YOU ARE WORKING ON THE CORE OR SHOP COMPONENTS
import ChopShopDebug as CSD
#CSD.enable_debug()
#####

from ChopLib import ChopLib
from ChopWebServer import ChopWebUi
global choplib
global chopweb

def signal_handler(signal, frame):
        try:
            chopweb.stop()
            #choplib.stop()

            #choplib.finish()
            #choplib.join()
        except:
            pass

        sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)


def main():
    #global choplib
    global chopweb

    #choplib = ChopLib()
    chopweb = ChopWebUi()

    optparser = OptionParser(usage='usage: %prog [options] ["bpf filter"] "list ; of ; modules"')
    '''
        optparser.add_option("-B", "--base_dir", dest = "base_dir", default=None,
            help = "Base directory to load modules and external libraries from")
        optparser.add_option("-E", "--ext_dir", dest = "ext_dir",
            default=CHOPSHOP_WD + '/ext_libs/', help = "Directory to load external libraries from")
        optparser.add_option("-M", "--mod_dir", dest = "mod_dir",
            default=CHOPSHOP_WD + '/modules/', help = "Directory to load modules from")
        optparser.add_option("-f", "--file", action="store", dest="filename",
            type="string", help="input pcap file")
        optparser.add_option("-l", "--aslist", action = "store_true", dest = "aslist",
            default=False, help="Treat filename as a file containing a list of files")
        optparser.add_option("-L", "--long", action="store_true", dest="longrun",
            default=False, help="Read from filename forever even if there's no more pcap data")
        optparser.add_option("-i", "--interface", action="store", dest="interface",
            type="string", help="interface to listen on")
        optparser.add_option("-G", "--GMT", action="store_true", dest="GMT",
        default=False, help="timestamps in GMT (tsprnt and tsprettyprnt only)")
    '''
    optparser.add_option("-v", "--version", action="store_true", dest="version",
        default=False,help="print version and exit")
    optparser.add_option("-a", "--host", action="store", dest="host", type="string",
        default='',help="Host/Address to listen on")
    optparser.add_option("-p", "--port", action="store", dest="port", type="int",
        default=8080,help="Port to listen on")

    (options, args) = optparser.parse_args()


    '''
        if len(args) <= 0:
            print "Module List Required"
            sys.exit(0)

    
        if not options.interface:
            if not options.filename:
                #Nothing is set for input, attempt to read a list of files from stdin
                try:
                    files = sys.stdin.readlines()
                except Exception, e:
                    sys.exit("Error getting files from stdin %s\n" %  str(e))

                try:
                    f = open('/dev/tty')
                    os.dup2(f.fileno(), 0)
                except:
                    print "Unable to reclaim tty"
                    sys.exit(-1)

                choplib.filelist = files

            else:
                if not os.path.exists(options.filename):
                    print "Unable to find file '%s'" % options.filename
                    sys.exit(-1)
                choplib.filename = options.filename
        else:
            choplib.interface = options.interface
    '''

    chopweb.server_host = options.host
    chopweb.port = options.port
    #chopweb.bind(choplib)
    chopweb.start()
    #chopweb should run choplib.start()


    '''
        choplib.base_dir = options.base_dir
        choplib.mod_dir = options.mod_dir
        choplib.ext_dir = options.ext_dir
        choplib.aslist = options.aslist
        choplib.longrun = options.longrun
        choplib.GMT = options.GMT

        if len(args) > 1:
            choplib.bpf = args[0]
            choplib.modules = args[1]
        else:
            choplib.modules = args[0]

        choplib.text = True
    '''


    while chopweb.is_alive():
        time.sleep(.1) 


    #choplib.start()

    #choplib.finish()
    #if choplib.is_alive():
    #    choplib.join()

if __name__ == '__main__':
    main()
